name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && 
       (contains(github.event.pull_request.labels.*.name, 'release:patch') || 
        contains(github.event.pull_request.labels.*.name, 'release:minor') || 
        contains(github.event.pull_request.labels.*.name, 'release:major'))) ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Wait for PostgreSQL
        timeout-minutes: 2
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test_user > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
            sleep 2
          done
          echo "ERROR: PostgreSQL failed to become ready within 60 seconds"
          exit 1

      - name: Run tests
        run: bun run test

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release ${{ steps.new_version.outputs.version }}
          body: 'Release version ${{ steps.new_version.outputs.version }}'
          draft: false
          prerelease: false
