name: Release

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true && 
       (contains(github.event.pull_request.labels.*.name, 'release:patch') || 
        contains(github.event.pull_request.labels.*.name, 'release:minor') || 
        contains(github.event.pull_request.labels.*.name, 'release:major'))) ||
      (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    permissions:
      contents: write
      pull-requests: write
      id-token: write

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Wait for PostgreSQL
        timeout-minutes: 2
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test_user > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
            sleep 2
          done
          echo "ERROR: PostgreSQL failed to become ready within 60 seconds"
          exit 1

      - name: Run tests
        run: bun run test

      - name: Determine version bump type
        id: bump_type
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BUMP="${{ github.event.inputs.version_bump }}"
          else
            if ${{ contains(github.event.pull_request.labels.*.name, 'release:major') }}; then
              BUMP="major"
            elif ${{ contains(github.event.pull_request.labels.*.name, 'release:minor') }}; then
              BUMP="minor"
            elif ${{ contains(github.event.pull_request.labels.*.name, 'release:patch') }}; then
              BUMP="patch"
            else
              BUMP="patch"  # Default to patch if no label
            fi
          fi
          echo "type=$BUMP" >> $GITHUB_OUTPUT

      - name: Get current version
        id: current_version
        run: |
          CURRENT=$(node -p "require('./package.json').version")
          echo "version=$CURRENT" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP="${{ steps.bump_type.outputs.type }}"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case $BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              NEXT_MINOR=1
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              NEXT_MINOR=$((MINOR + 1))
              ;;
            patch)
              PATCH=$((PATCH + 1))
              NEXT_MINOR=$MINOR
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEXT_DEV_VERSION="$MAJOR.$NEXT_MINOR.0-dev"
          NEEDS_DEV_BUMP="false"
          
          # Only bump develop for major/minor releases
          if [[ "$BUMP" != "patch" ]]; then
            NEEDS_DEV_BUMP="true"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "next_dev_version=$NEXT_DEV_VERSION" >> $GITHUB_OUTPUT
          echo "needs_dev_bump=$NEEDS_DEV_BUMP" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP" >> $GITHUB_OUTPUT

      - name: Update package.json to release version
        run: bun run scripts/update-version.ts ${{ steps.new_version.outputs.version }}

      - name: Commit and tag release version
        run: |
          git add package.json
          git commit -m "chore: release version ${{ steps.new_version.outputs.version }}"
          git tag "v${{ steps.new_version.outputs.version }}"
          git push origin main --tags

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: Release ${{ steps.new_version.outputs.version }}
          body: 'Release version ${{ steps.new_version.outputs.version }}'
          draft: false
          prerelease: false

      - name: Checkout develop branch
        run: |
          git fetch origin develop:develop || git checkout -b develop
          git checkout develop

      - name: Merge main into develop
        run: |
          git merge main --no-edit
          git push origin develop

      - name: Check if develop version bump is needed
        id: check_dev_bump
        run: |
          NEEDS_BUMP="${{ steps.new_version.outputs.needs_dev_bump }}"
          
          if [[ "$NEEDS_BUMP" == "true" ]]; then
            # Get current develop version
            CURRENT_DEV=$(node -p "require('./package.json').version")
            TARGET_DEV="${{ steps.new_version.outputs.next_dev_version }}"
            
            echo "Current develop version: $CURRENT_DEV"
            echo "Target develop version: $TARGET_DEV"
            
            # Compare versions (remove -dev suffix for comparison)
            CURRENT_BASE=$(echo "$CURRENT_DEV" | sed 's/-dev$//')
            TARGET_BASE=$(echo "$TARGET_DEV" | sed 's/-dev$//')
            
            # Simple version comparison: if target > current, we need to bump
            if [[ "$TARGET_BASE" > "$CURRENT_BASE" ]]; then
              echo "should_bump=true" >> $GITHUB_OUTPUT
              echo "✅ Version bump needed: $CURRENT_DEV → $TARGET_DEV"
            else
              echo "should_bump=false" >> $GITHUB_OUTPUT
              echo "ℹ️ Version bump skipped: develop ($CURRENT_DEV) is already ahead"
            fi
          else
            echo "should_bump=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Patch release - no develop version bump needed"
          fi

      - name: Create version bump branch
        if: steps.check_dev_bump.outputs.should_bump == 'true'
        run: |
          BRANCH_NAME="chore/bump-version-${{ steps.new_version.outputs.next_dev_version }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update package.json to next dev version
        if: steps.check_dev_bump.outputs.should_bump == 'true'
        run: bun run scripts/update-version.ts ${{ steps.new_version.outputs.next_dev_version }}

      - name: Commit version bump
        if: steps.check_dev_bump.outputs.should_bump == 'true'
        run: |
          git add package.json
          git commit -m "chore: bump to dev version ${{ steps.new_version.outputs.next_dev_version }}"
          git push origin "${{ env.branch }}"

      - name: Create Pull Request to develop
        if: steps.check_dev_bump.outputs.should_bump == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: bump version to ${{ steps.new_version.outputs.next_dev_version }}`,
              head: '${{ env.branch }}',
              base: 'develop',
              body: `## Version Bump for Develop
              
              This PR bumps the develop branch to \`${{ steps.new_version.outputs.next_dev_version }}\` after releasing \`${{ steps.new_version.outputs.version }}\` to main.
              
              ### Changes
              - Updated package.json version to next minor dev version
              
              ### Context
              - **Release Version**: \`${{ steps.new_version.outputs.version }}\`
              - **Bump Type**: \`${{ steps.new_version.outputs.bump_type }}\`
              - **Next Dev Version**: \`${{ steps.new_version.outputs.next_dev_version }}\`
              
              This ensures develop stays ahead of main for the next development cycle.
              
              **Auto-generated by release workflow**`
            });
            console.log(`Created PR #${pr.number}`);
            return pr.number;
