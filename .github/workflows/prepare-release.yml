name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout develop branch
        uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version from develop
        id: current_version
        run: |
          CURRENT=$(node -p "require('./package.json').version.replace(/-dev$/, '')")
          echo "version=$CURRENT" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP="${{ github.event.inputs.version_bump }}"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"

          case $BUMP in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              NEXT_MINOR=1
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              NEXT_MINOR=$((MINOR + 1))
              ;;
            patch)
              PATCH=$((PATCH + 1))
              NEXT_MINOR=$MINOR
              ;;
          esac

          RELEASE_VERSION="$MAJOR.$MINOR.$PATCH"
          NEXT_DEV_VERSION="$MAJOR.$NEXT_MINOR.0-dev"
          
          echo "release=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "next_dev=$NEXT_DEV_VERSION" >> $GITHUB_OUTPUT
          echo "bump_type=$BUMP" >> $GITHUB_OUTPUT
          echo "needs_dev_bump=$([[ $BUMP != 'patch' ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          BRANCH_NAME="release/${{ steps.new_version.outputs.release }}"
          git checkout -b "$BRANCH_NAME"
          echo "branch=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Update package.json to release version
        run: |
          bun run scripts/update-version.ts ${{ steps.new_version.outputs.release }}

      - name: Commit release version
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.new_version.outputs.release }}"
          git push origin "${{ env.branch }}"

      - name: Create Pull Request to main
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release v${{ steps.new_version.outputs.release }}`,
              head: '${{ env.branch }}',
              base: 'main',
              body: `## Release v${{ steps.new_version.outputs.release }}
              
              This PR prepares the release of version \`${{ steps.new_version.outputs.release }}\`.
              
              ### Version Bump
              - Type: **${{ steps.new_version.outputs.bump_type }}**
              - Version: \`${{ steps.new_version.outputs.release }}\`
              
              ### Next Steps
              1. Review and merge this PR
              2. The release workflow will automatically:
                 - Tag the release
                 - Publish to npm
                 - Create GitHub release
                 ${{ steps.new_version.outputs.needs_dev_bump == 'true' && '- Create PR to bump develop to `' + steps.new_version.outputs.next_dev + '`' || '- Merge changes back to develop (no version bump needed for patch)' }}
              
              **Auto-generated by prepare-release workflow**`,
            });
            
            // Add release label based on bump type
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: [`release:${{ steps.new_version.outputs.bump_type }}`]
            });
            
            console.log(`Created PR #${pr.number}`);
            return pr.number;

      - name: Output summary
        run: |
          echo "## Release Preparation Complete âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Release Version**: ${{ steps.new_version.outputs.release }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type**: ${{ steps.new_version.outputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Dev Version**: ${{ steps.new_version.outputs.next_dev }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dev Bump Needed**: ${{ steps.new_version.outputs.needs_dev_bump }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Merge the PR to trigger the release workflow." >> $GITHUB_STEP_SUMMARY
