name: Build and Test

on:
  pull_request:
    branches:
      - main
      - develop

# This workflow runs on both main (stable) and develop (unstable) branches
# main: Only updated via releases
# develop: Active development with -dev versions

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.detect.outputs.code-changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect code changes
        id: detect
        run: |
          # Check if this is a PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          # Check for changes in code files (excluding documentation)
          CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep -E '\.(ts|tsx|js|jsx|json|yml|yaml)$' | grep -v '\.md$' || echo '')
          
          if [ -n "$CHANGED" ]; then
            echo "Code files changed, will run tests and build"
            echo "code-changed=true" >> $GITHUB_OUTPUT
          else
            echo "Only documentation changed, skipping tests and build"
            echo "code-changed=false" >> $GITHUB_OUTPUT
          fi

  build-and-test:
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Wait for PostgreSQL
        timeout-minutes: 2
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U test_user > /dev/null 2>&1; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/30: PostgreSQL not ready yet, waiting 2 seconds..."
            sleep 2
          done
          echo "ERROR: PostgreSQL failed to become ready within 60 seconds"
          exit 1

      - name: Run tests
        run: bun run test

      - name: Run tests with coverage
        run: bun run test:coverage

  # This job always runs and ensures PR can be merged even when tests are skipped
  validation:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-test]
    if: always()
    steps:
      - name: Validate workflow results
        run: |
          CODE_CHANGED="${{ needs.detect-changes.outputs.code-changed }}"
          BUILD_RESULT="${{ needs.build-and-test.result }}"
          
          echo "Code changed: $CODE_CHANGED"
          echo "Build and test result: $BUILD_RESULT"
          
          # If code changed, build-and-test must have succeeded
          if [ "$CODE_CHANGED" = "true" ] && [ "$BUILD_RESULT" != "success" ]; then
            echo "❌ Tests failed or were cancelled"
            exit 1
          fi
          
          # If only docs changed, build-and-test was skipped - that's OK
          if [ "$CODE_CHANGED" = "false" ]; then
            echo "✅ Only documentation changed, tests skipped as expected"
            exit 0
          fi
          
          echo "✅ All checks passed"
          exit 0
